// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/20190805142119_initial_migration.down.sql (80B)
// migrations/20190805142119_initial_migration.up.sql (2.874kB)

package bindata

import (
	"crypto/sha256"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20190805142119_initial_migrationDownSql = []byte(`BEGIN;
DROP TABLE issued_tokens;
DROP TABLE users;
DROP TABLE prospects;
COMMIT;`)

func _20190805142119_initial_migrationDownSqlBytes() ([]byte, error) {
	return __20190805142119_initial_migrationDownSql, nil
}

func _20190805142119_initial_migrationDownSql() (*asset, error) {
	bytes, err := _20190805142119_initial_migrationDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20190805142119_initial_migration.down.sql", size: 80, mode: os.FileMode(0644), modTime: time.Unix(1582443157, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0x68, 0x6a, 0x9c, 0xae, 0x19, 0xb, 0x59, 0x3b, 0x36, 0xe8, 0xe7, 0xf, 0xd6, 0x27, 0xb7, 0x18, 0x52, 0xe, 0x21, 0x88, 0xda, 0x1e, 0xa0, 0x69, 0x29, 0x61, 0xba, 0xd, 0x71, 0xa7, 0x74}}
	return a, nil
}

var __20190805142119_initial_migrationUpSql = []byte(`ROLLBACK;
BEGIN;

CREATE TABLE companies (
    id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid (),
    key TEXT NOT NULL UNIQUE,
    name TEXT NOT NULL,
    archived BOOLEAN NOT NULL DEFAULT FALSE,
    archived_at TIMESTAMPTZ,
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE groups (
    id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid (),
    name TEXT NOT NULL,
    company_id UUID NOT NULL REFERENCES companies(id),
    archived BOOLEAN NOT NULL DEFAULT FALSE,
    archived_at TIMESTAMPTZ,
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE roles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid (),
    name TEXT UNIQUE NOT NULL,
    permissions TEXT[] NOT NULL,
    archived BOOLEAN NOT NULL DEFAULT FALSE,
    archived_at TIMESTAMPTZ,
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE users (
    id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid (),
    role_id UUID NOT NULL REFERENCES roles(id),
    company_id UUID NOT NULL REFERENCES companies(id),
    email TEXT UNIQUE NOT NULL,
    name TEXT NOT NULL,
    verified BOOLEAN NOT NULL DEFAULT FALSE,
    verify_token TEXT NOT NULL DEFAULT gen_random_uuid (),
    require_old_password BOOLEAN NOT NULL DEFAULT FALSE,
    reset_token TEXT NOT NULL DEFAULT gen_random_uuid (),
    password_hash TEXT NOT NULL,
    archived BOOLEAN NOT NULL DEFAULT FALSE,
    archived_at TIMESTAMPTZ,
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);


CREATE TABLE issued_tokens (
    id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid (),
    user_id uuid NOT NULL REFERENCES users (id),
    company_id uuid NOT NULL REFERENCES companies (id),
    device TEXT NOT NULL,
    token_created TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    token_expires TIMESTAMPTZ NOT NULL,
    blacklisted BOOLEAN NOT NULL DEFAULT FALSE
);


CREATE TABLE notes (
    id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid (),
    owner_id UUID NOT NULL REFERENCES users(id),
    name TEXT NOT NULL,
    body TEXT NOT NULL DEFAULT '',
    done BOOLEAN NOT NULL DEFAULT false,
    archived BOOLEAN NOT NULL DEFAULT FALSE,
    archived_at TIMESTAMPTZ,
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE user_groups (
    user_id UUID NOT NULL REFERENCES users(id),
    group_id UUID NOT NULL REFERENCES groups(id),
    enrolled_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY(user_id, group_id)
);


CREATE TABLE shares (
    user_id UUID NOT NULL REFERENCES users(id),
    note_id UUID NOT NULL REFERENCES notes(id),
    shared_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY(user_id, note_id)
);

COMMIT;`)

func _20190805142119_initial_migrationUpSqlBytes() ([]byte, error) {
	return __20190805142119_initial_migrationUpSql, nil
}

func _20190805142119_initial_migrationUpSql() (*asset, error) {
	bytes, err := _20190805142119_initial_migrationUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20190805142119_initial_migration.up.sql", size: 2874, mode: os.FileMode(0644), modTime: time.Unix(1583114198, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0xbc, 0x90, 0xe2, 0xb4, 0xdf, 0x45, 0x40, 0xea, 0x7, 0x9b, 0x93, 0xa5, 0x47, 0x56, 0xab, 0xc2, 0xf3, 0x8c, 0x28, 0x55, 0xc8, 0x4c, 0x60, 0xf3, 0x18, 0x59, 0x64, 0xd2, 0xe4, 0x37, 0x6}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20190805142119_initial_migration.down.sql": _20190805142119_initial_migrationDownSql,
	"20190805142119_initial_migration.up.sql":   _20190805142119_initial_migrationUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"20190805142119_initial_migration.down.sql": &bintree{_20190805142119_initial_migrationDownSql, map[string]*bintree{}},
	"20190805142119_initial_migration.up.sql":   &bintree{_20190805142119_initial_migrationUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
