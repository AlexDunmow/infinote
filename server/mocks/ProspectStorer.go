// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	db "boilerplate/db"
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// ProspectStorer is an autogenerated mock type for the ProspectStorer type
type ProspectStorer struct {
	mock.Mock
}

// Finish provides a mock function with given fields: id, tx
func (_m *ProspectStorer) Finish(id uuid.UUID, tx ...*sql.Tx) (*db.Prospect, error) {
	_va := make([]interface{}, len(tx))
	for _i := range tx {
		_va[_i] = tx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *db.Prospect
	if rf, ok := ret.Get(0).(func(uuid.UUID, ...*sql.Tx) *db.Prospect); ok {
		r0 = rf(id, tx...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Prospect)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, ...*sql.Tx) error); ok {
		r1 = rf(id, tx...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id, tx
func (_m *ProspectStorer) Get(id uuid.UUID, tx ...*sql.Tx) (*db.Prospect, error) {
	_va := make([]interface{}, len(tx))
	for _i := range tx {
		_va[_i] = tx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *db.Prospect
	if rf, ok := ret.Get(0).(func(uuid.UUID, ...*sql.Tx) *db.Prospect); ok {
		r0 = rf(id, tx...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Prospect)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, ...*sql.Tx) error); ok {
		r1 = rf(id, tx...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: email, tx
func (_m *ProspectStorer) Start(email string, tx ...*sql.Tx) (*db.Prospect, error) {
	_va := make([]interface{}, len(tx))
	for _i := range tx {
		_va[_i] = tx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, email)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *db.Prospect
	if rf, ok := ret.Get(0).(func(string, ...*sql.Tx) *db.Prospect); ok {
		r0 = rf(email, tx...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Prospect)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...*sql.Tx) error); ok {
		r1 = rf(email, tx...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: p, tx
func (_m *ProspectStorer) Update(p *db.Prospect, tx ...*sql.Tx) (*db.Prospect, error) {
	_va := make([]interface{}, len(tx))
	for _i := range tx {
		_va[_i] = tx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, p)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *db.Prospect
	if rf, ok := ret.Get(0).(func(*db.Prospect, ...*sql.Tx) *db.Prospect); ok {
		r0 = rf(p, tx...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Prospect)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*db.Prospect, ...*sql.Tx) error); ok {
		r1 = rf(p, tx...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
