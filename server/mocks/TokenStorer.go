// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	db "boilerplate/db"
	store "boilerplate/store"

	mock "github.com/stretchr/testify/mock"
)

// TokenStorer is an autogenerated mock type for the TokenStorer type
type TokenStorer struct {
	mock.Mock
}

// Blacklist provides a mock function with given fields:
func (_m *TokenStorer) Blacklist() (store.Blacklist, error) {
	ret := _m.Called()

	var r0 store.Blacklist
	if rf, ok := ret.Get(0).(func() store.Blacklist); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Blacklist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: t
func (_m *TokenStorer) Delete(t *db.IssuedToken) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.IssuedToken) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *TokenStorer) Get(id string) (*db.IssuedToken, error) {
	ret := _m.Called(id)

	var r0 *db.IssuedToken
	if rf, ok := ret.Get(0).(func(string) *db.IssuedToken); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.IssuedToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByUser provides a mock function with given fields: userID
func (_m *TokenStorer) GetAllByUser(userID string) ([]*db.IssuedToken, error) {
	ret := _m.Called(userID)

	var r0 []*db.IssuedToken
	if rf, ok := ret.Get(0).(func(string) []*db.IssuedToken); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.IssuedToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllExpired provides a mock function with given fields:
func (_m *TokenStorer) GetAllExpired() ([]*db.IssuedToken, error) {
	ret := _m.Called()

	var r0 []*db.IssuedToken
	if rf, ok := ret.Get(0).(func() []*db.IssuedToken); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.IssuedToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: t
func (_m *TokenStorer) Insert(t *db.IssuedToken) (*db.IssuedToken, error) {
	ret := _m.Called(t)

	var r0 *db.IssuedToken
	if rf, ok := ret.Get(0).(func(*db.IssuedToken) *db.IssuedToken); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.IssuedToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*db.IssuedToken) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: t
func (_m *TokenStorer) Update(t *db.IssuedToken) (*db.IssuedToken, error) {
	ret := _m.Called(t)

	var r0 *db.IssuedToken
	if rf, ok := ret.Get(0).(func(*db.IssuedToken) *db.IssuedToken); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.IssuedToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*db.IssuedToken) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
